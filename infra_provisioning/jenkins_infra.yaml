AWSTemplateFormatVersion: 2010-09-09
Parameters:
  ## VPC Parameters
  AzList:
    Type: CommaDelimitedList
    Default: "ap-southeast-1a, ap-southeast-1b"
  VpcCidrBlock:
    Type: String
    Default: 10.100.0.0/20
  PubCidrBlocks:
    Type: CommaDelimitedList
    Default: "10.100.1.0/24, 10.100.2.0/24"
  PvtCidrBlocks:
    Type: CommaDelimitedList
    Default: "10.100.11.0/24, 10.100.12.0/24"

  ## IAM Parameters
  IamUser:
    Type: String
    Default: infra_cli_user

  ## EC2 Parameters
  BastionHostKeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the Bastion Host instance
    Type: AWS::EC2::KeyPair::KeyName
    Default: "infra_provision"

  JenkinsHostKeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the Jenkins Host instance
    Type: AWS::EC2::KeyPair::KeyName
    Default: "infra_provision"

  AppHostKeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the Application Host instance
    Type: AWS::EC2::KeyPair::KeyName
    Default: "infra_provision"

  BastionInstanceType:
    Description: Bastion Host EC2 instance type
    Type: String
    Default: t3.small

  JenkinsInstanceType:
    Description: Jenkins Host EC2 instance type
    Type: String
    Default: t3.small

  AppInstanceType:
    Description: App Host EC2 instance type
    Type: String
    Default: t3.small

  LatestAmiId:
    Type:  'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'

  BastionSSHLocation:
    Description: The IP address range that can be used to SSH to the Bastion EC2 instances
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  ## ALB Parameters

  AppDomain:
    Description: Application domain name to be configured in Listener rule
    Type: String
    Default: appdemo.brayanperera.cyou



Resources:

  ## IAM Roles
  AmazonEC2ContainerRegistryPowerUserRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPowerUser"
        - "arn:aws:iam::aws:policy/AmazonS3FullAccess"

  AmazonEC2ContainerRegistryReadOnlyRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
        - "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess"

  JenkinsInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles:
        - !Ref AmazonEC2ContainerRegistryPowerUserRole

  AppInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles:
        - !Ref AmazonEC2ContainerRegistryPowerUserRole

  ## VPC
  JenkinsVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidrBlock

  ## Subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref JenkinsVPC
      AvailabilityZone: !Select [ 0, !Ref AzList ]
      CidrBlock: !Select [ 0, !Ref PubCidrBlocks ]
      MapPublicIpOnLaunch: true

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref JenkinsVPC
      AvailabilityZone: !Select [ 1, !Ref AzList ]
      CidrBlock: !Select [ 1, !Ref PubCidrBlocks ]
      MapPublicIpOnLaunch: true

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref JenkinsVPC
      AvailabilityZone: !Select [ 0, !Ref AzList ]
      CidrBlock: !Select [ 0, !Ref PvtCidrBlocks ]
      MapPublicIpOnLaunch: false

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref JenkinsVPC
      AvailabilityZone: !Select [ 1, !Ref AzList ]
      CidrBlock: !Select [ 1, !Ref PvtCidrBlocks ]
      MapPublicIpOnLaunch: false


 ## Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway

  GatewayToInternet:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref JenkinsVPC
      InternetGatewayId: !Ref InternetGateway

  ## Public Routing
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref JenkinsVPC

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayToInternet
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  ## NAT Gateway
  NatGateway:
    Type: AWS::EC2::NatGateway
    DependsOn: NatPublicIP
    Properties:
      SubnetId: !Ref PublicSubnet1
      AllocationId: !GetAtt NatPublicIP.AllocationId

  ## ELASTIC IP
  NatPublicIP:
    Type: AWS::EC2::EIP
    DependsOn: JenkinsVPC
    Properties:
      Domain: vpc

  ## Private Routing
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref JenkinsVPC

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      NatGatewayId: !Ref NatGateway
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  ## ECR Repo
  DemoRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "demo-app"
      RepositoryPolicyText:
        Version: "2012-10-17"
        Statement:
          -
            Sid: AllowPushPull
            Effect: Allow
            Principal:
              AWS:
                - !Sub arn:aws:iam::${AWS::AccountId}:user/${IamUser}

            Action:
              - "ecr:GetDownloadUrlForLayer"
              - "ecr:BatchGetImage"
              - "ecr:BatchCheckLayerAvailability"
              - "ecr:PutImage"
              - "ecr:InitiateLayerUpload"
              - "ecr:UploadLayerPart"
              - "ecr:CompleteLayerUpload"


  ## Security Groups
  ALBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable port 80 and 443
      GroupName: "ALB_sec_group"
      VpcId: !Ref JenkinsVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: "0.0.0.0/0"
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: "0.0.0.0/0"

  BastionHostSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22
      GroupName: "Bastion_sec_group"
      VpcId: !Ref JenkinsVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref BastionSSHLocation

  JenkinsHostSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22
      GroupName: "Jenkins_sec_group"
      VpcId: !Ref JenkinsVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        SourceSecurityGroupId: !Ref BastionHostSecGroup
      - IpProtocol: tcp
        FromPort: 8080
        ToPort: 8080
        SourceSecurityGroupId: !Ref ALBSecGroup
      - IpProtocol: tcp
        FromPort: 8443
        ToPort: 8443
        SourceSecurityGroupId: !Ref ALBSecGroup

  AppHostSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22
      GroupName: "App_sec_group"
      VpcId: !Ref JenkinsVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        SourceSecurityGroupId: !Ref BastionHostSecGroup
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        SourceSecurityGroupId: !Ref JenkinsHostSecGroup
      - IpProtocol: tcp
        FromPort: 8000
        ToPort: 8000
        SourceSecurityGroupId: !Ref ALBSecGroup

  ## EC2 Resources
  BastionEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref 'BastionInstanceType'
      SecurityGroupIds:
        - !GetAtt
          - BastionHostSecGroup
          - GroupId
      KeyName: !Ref 'BastionHostKeyName'
      ImageId: !Ref 'LatestAmiId'
      SubnetId: !Ref PublicSubnet1
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install git -y
          amazon-linux-extras install ansible2 -y
      Tags:
        - Key: Name
          Value: bastion
#

  JenkinsEC2Instance1:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref 'JenkinsInstanceType'
      SecurityGroupIds:
        - !GetAtt
          - JenkinsHostSecGroup
          - GroupId
      KeyName: !Ref 'JenkinsHostKeyName'
      ImageId: !Ref 'LatestAmiId'
      SubnetId: !Ref PrivateSubnet1
      IamInstanceProfile: !Ref JenkinsInstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          export LC_CTYPE=en_US.UTF-8
          export LC_ALL=en_US.UTF-8

          # Update the OS packages
          yum upgrade

          # Install Docker and docker-compose
          amazon-linux-extras install docker
          service docker start
          usermod -a -G docker ec2-user
          curl -L https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose

          # Install Jenkins
          wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo
          rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key

          amazon-linux-extras install java-openjdk11 -y
          yum install jenkins -y
          usermod -a -G docker jenkins
          systemctl enable jenkins
          systemctl start jenkins

          # Install Ansible
          amazon-linux-extras install ansible2 -y
      Tags:
        - Key: Name
          Value: jenkins-1

#

  AppEC2Instance1:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref 'AppInstanceType'
      SecurityGroupIds:
        - !GetAtt
          - AppHostSecGroup
          - GroupId
      KeyName: !Ref 'AppHostKeyName'
      ImageId: !Ref 'LatestAmiId'
      SubnetId: !Ref PrivateSubnet1
      IamInstanceProfile: !Ref AppInstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          export LC_CTYPE=en_US.UTF-8
          export LC_ALL=en_US.UTF-8

          # Update the OS packages
          yum upgrade

          # Install Docker and docker-compose

          yum install -y curl
          amazon-linux-extras install docker
          service docker start
          usermod -a -G docker ec2-user
          curl -L https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
      Tags:
        - Key: Name
          Value: app-1
#

 ## ALB Resources
  JenkinsTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      Name: jenkins-tg
      Port: 8080
      Protocol: HTTP
      VpcId: !Ref JenkinsVPC
      TargetType: instance
      Targets:
        - Id: !Ref JenkinsEC2Instance1
#

  AppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      Name: App-tg
      Port: 8000
      Protocol: HTTP
      VpcId: !Ref JenkinsVPC
      TargetType: instance
      Targets:
        - Id: !Ref AppEC2Instance1
#

  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Name: "DemoALB"
      Scheme: internet-facing
      SecurityGroups: [!Ref 'ALBSecGroup']
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2

  ALBDefaultListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref JenkinsTargetGroup
      LoadBalancerArn: !Ref ALB
      Port: '80'
      Protocol: HTTP

  AppListenerRule:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref AppTargetGroup
      Conditions:
        - Field: host-header
          HostHeaderConfig:
            Values:
              - !Ref AppDomain
      ListenerArn: !Ref ALBDefaultListener
      Priority: 1


Metadata:

  Authors:
    Description:  Brayan Perera (brayan.perera@gmail.com)

  Purpose:
    Description: "This template creates deployment environment for Jenkins server and application servers"

  License: Apache-2.0

  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "VPC Parameters"
        Parameters:
          - AzList
          - VpcCidrBlock
          - PubCidrBlocks
          - PvtCidrBlocks
          - IamUser
      - Label:
          default: "EC2 Instance Parameters"
        Parameters:
          - BastionHostKeyName
          - JenkinsHostKeyName
          - AppHostKeyName
          - BastionInstanceType
          - JenkinsInstanceType
          - AppInstanceType
          - BastionSSHLocation
          - LatestAmiId
      - Label:
          default: "ALB Parameters"
        Parameters:
          - AppDomain
    ParameterLabels:
      AzList:
        default: "Availability Zone List"
      VpcCidrBlock:
        default: "VPC CIDR Block"
      PubCidrBlocks:
        default: "Public Subnet CIDR Blocks"
      PvtCidrBlocks:
        default: "Private Subnet CIDR Blocks"
      IamUser:
        default: "Allowed IAM user for ECR"
      BastionHostKeyName:
        default: "Bastion Host KeyName"
      JenkinsHostKeyName:
        default: "Jenkins Host KeyName"
      AppHostKeyName:
        default: "App Host KeyName"
      BastionInstanceType:
        default: "Bastion Host Instance Type"
      JenkinsInstanceType:
        default: "Jenkins Host Instance Type"
      AppInstanceType:
        default: "App Host Instance Type"
      LatestAmiId:
        default: "AMI ID"
      BastionSSHLocation:
        default: "Allowed IP CIDR for Bastion Host"
      AppDomain:
        default: "Demo Application Domain Name"

Outputs:
  DemoRepositoryId:
    Description: "ECR Repository"
    Value: !Ref DemoRepository
    Export:
      Name: DemoRepositoryId

  VPCId:
    Description: "VPC ID"
    Value: !Ref JenkinsVPC
    Export:
      Name: VPCId

  NatPublicIPAddr:
    Description: "NAT Gateway IP"
    Value: !Ref NatPublicIP
    Export:
      Name: NatPublicIPAddr

  BastionIP:
    Description: "Bastion Host IP"
    Value: !GetAtt BastionEC2Instance.PublicIp
    Export:
      Name: BastionIP

  JenkinsIP1:
    Description: "Jenkins Host 1 IP"
    Value: !GetAtt JenkinsEC2Instance1.PrivateIp
    Export:
      Name: JenkinsIP1

  JenkinsIP1:
    Description: "Jenkins Host 1 IP"
    Value: !GetAtt JenkinsEC2Instance1.PrivateIp
    Export:
      Name: JenkinsIP1

  AppIP1:
    Description: "App Host 1 IP"
    Value: !GetAtt AppEC2Instance1.PrivateIp
    Export:
      Name: AppIP1

  AlbDNS:
    Description: "ALB DNS Name"
    Value: !GetAtt ALB.DNSName
    Export:
      Name: AlbDNS